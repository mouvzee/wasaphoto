openapi: 3.0.3
info:
  title: WASAphoto
  description: |-
    Versione 1 del progetto WASA.
  version: "1"

security:
  - controllo: []
components:
  securitySchemes: 
    controllo:
      type: http
      scheme: bearer
  schemas:
    User:
      type: object
      properties:
        userid:
          type: integer
        username:
          type: string
          #minLenght: 3
          #maxLenght: 16
    Photo:
      type: object
      properties:
        photoID:
          type: integer
        user: { $ref: "#/components/schemas/User"}
        URL: 
          type: string
        imageData:
          type: string
          format: binary
        caption:
          type: string
        nlike:
          type: integer
        ncomment:
          type: integer
        liked: 
          type: boolean
        createdAt:
          type: string
          format: date-time
    comment:
      type: object
      properties:
        commentID: 
          type: integer
        user: { $ref: "#/components/schemas/User"}
        lyric:
          type: string
        createdAt:
          type: string
          format: date-time
    Profile:
      type: object
      properties:
        user: { $ref: "#/components/schemas/User"}
        name:
          type: string
        follower:
          type: integer
        following: 
          type: integer
        isFollowed:
          type: boolean
    Authorization:
      type: object
      properties:
        user: {$ref: "#/components/schemas/User"}
        token: 
          type: integer




paths:
  /login:
    post:
      tags: 
        - "login"
      summary: Log in a user
      description:
        Logs in the user. If the user does not exist, it will be created. Otherwise, returns the user ID.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { $ref: "#/components/schemas/User/properties/username"}
              example:
                username: "example_user"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Authorization"}
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Authorization"}
        '400':
          description: Bad request. Invalid input data.
        '500':
          description: Internal server error. Failed to process the request.

  /user/{userID}/username:
    parameters:
      - name: userID
        in: path
        description: Check the userID of the user who wants to set the username
        schema: { $ref: "#/components/schemas/User/properties/userid"}
        required: true

    put:
      tags: ["User"]
      summary: Imposta nome utente
      operationId: setMyUserName
      description: |-
        Set a new username. If the username is already taken, the user
        is not authorized or the username is not valid the request will fail.
      security:
        - controllo: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: New username for the user
              type: object
              properties:
                username: { $ref: "#/components/schemas/User/properties/username"}
      responses:
        '200':
          description: Nome utente impostato con successo
        '400':
          description: Errore nei dati della richiesta
        '401':
          description: Autorizzazione non concessa
        '404':
          description: Indirizzo email non trovato


  /photo/{photoID}/user/{userid}:
    post:
      tags: ["photo"]
      summary: Carica nuova foto
      operationId: uploadPhoto
      description: Consente il caricamento di una foto nel feed
      security:
        - controllo: []
      requestBody: 
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/Photo'
      responses:
        '400':
          description: Errore nei dati della richiesta
        '200':
          description: Immagine correttamente caricata

  /user/followings:
    post:
      summary: Seguire un'utente
      operationId: followUser
      security:
        - controllo: []
      requestBody:
          description: ID di chi deve essere seguito
          required: true
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: utente seguito!
        '400':
          description: Errore nei dati della richiesta

  /user/unfollowings:
    post:
      summary: smettere di seguire un'utente
      operationId: unfollowUser
      security:
        - controllo: []
      requestBody:
        description: id di chi viene smesso di seguire
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: utente seguito!
        '400':
          description: Errore nei dati della richiesta

  /user/{user_id}/user/{user_to_ban_id}:
    post:
      summary: Bloccare un utente
      operationId: banUser
      security:
        - controllo: []
      parameters:
      - name: user_id
        in: path
        description: chi banna
        required: true
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/User'
      - name: user_to_ban_id
        in: path 
        description: chi viene bloccato
        required: true
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Utente bloccato
        '400':
          description: Errore nei dati della richiesta
  /user/{user_id}/bans/{user_to_unban_id}:
    post:
      summary: Sbloccare un utente
      operationId: unbanUser
      security:
        - controllo: []
      parameters:
      - name: user_id
        in: path
        description: chi unbanna
        required: true
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/User'
      - name: user_to_unban_id
        in: path 
        description: chi viene sbloccato
        required: true
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Utente bloccato
        '400':
          description: Errore nei dati della richiesta
  /user/id/profile:
    get:
      summary: Visualizza il mio profilo
      operationId: getUserProfile
      description: permette all'utente di visualizzare il proprio profilo
      security:
        - controllo: []
      responses:
        "200":
          description: Profilo visualizzato con successo
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Errore nella richiesta
  /stream:
    get:
      summary: Visualizza la home
      operationId: getMyStream
      description: Permette all'utente di visualizzare lo stream
      security:
        - controllo: []
      responses:
        "200":
          description: Stream visualizzato con successo
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Profile'
        "401":
          description: Errore nella richiesta
  /user/user_id/photo/photo_to_like_id:
    put:
      summary: Mettere mi piace ad una foto
      operationId: likePhoto
      description: Permette all'utente di mettere like a una foto
      security:
        - controllo: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: '#/components/schemas/User'
                photo_to_like_id:
                  $ref: '#/components/schemas/Photo'
      responses:
        "200":
          description: Like avvenuto con successo
          content:
            application/json: 
              schema: {$ref: "#/components"} #RISOLVI
        "401":
          description: Errore nella richiesta
  /user/user_id/photo/photo_to_unlike_id:
    put:
      summary: Togliere mi piace ad una foto
      operationId: unlikePhoto
      description: Permette all'utente di togliere like a una foto
      security:
        - controllo: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: '#/components/schemas/User'
                photo_to_unlike_id:
                  $ref: '#/components/schemas/Photo'
      responses:
        "200":
          description: Like tolto con successo
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Photo/properties/nlike'
        "401":
          description: Errore nella richiesta
  /user/user_id/photo/photo_to_comment_id:
    put:
      summary: Commentare una foto
      operationId: commentPhoto
      description: Permette all'utente di commentare una foto
      security:
        - controllo: []
      requestBody: 
        required: true
        content:
          application/json: 
            schema:
              type: object 
              properties:
                user_id:
                  $ref: '#/components/schemas/User'
                photo_to_comment_id:
                  $ref: '#/components/schemas/Photo'
      responses:
        '200':
          description: Commentato con successo
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/comment'
        '401':
          description: Errore nella richiesta
  /user/user_id/photo/photo_to_uncomment_id:
    put:
      summary: Cancellare un commento da una foto
      operationId: uncommentPhoto
      description: Permette all'utente di cancellare un commento da una foto
      security:
        - controllo: []
      requestBody: 
        required: true
        content:
          application/json: 
            schema:
              type: object 
              properties:
                user_id:
                  $ref: '#/components/schemas/User'
                photo_to_uncomment_id:
                  $ref: '#/components/schemas/Photo'
      responses:
        '200':
          description: Commento cancellato con successo
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/comment'
        '401':
          description: Errore nella richiesta
  /user/photos/photoID:
    get:
      operationId: findPhoto
      summary: Restituisce la foto che si desidera cancellare
      security:
        - controllo: []
      responses:
        "200":
          description: Foto trovata con successo
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Errore nella richiesta      

    delete:
      operationId: deletePhoto
      summary: cancella la foto
      security:
        - controllo: []
      responses:
        "200":
          description: foto cancellata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

