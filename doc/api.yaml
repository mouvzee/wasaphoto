openapi: 3.0.3
info:
  title: WASAphoto
  description: |-
    Versione 1 del progetto WASA.
  version: "1"
tags:
  - name: Login
    description: Everything about login
  - name: Username
    description: Everything about username
  - name: Photo
    description: Everything about photos
  - name: User Profile
    description: Everything about user profiles
  - name: Stream
    description: Everything about the stream
components:
  schemas:
    userID:
      title: User id 
      description: The numeric user id
      type: integer
      example: 100
      minimum: 1 
    username:
      title: Username
      description: The username of the user
      type: string
      pattern: "^[a-z0-9]{3,13}$"
      example: "john123"
      minLength: 3
      maxLength: 13
    imageData:
      title: Image
      description: The base 64 image data
      type: string
      format: byte
      minLength: 0
      maxLength: 1000000000
    photoID:
      title: Photo id
      description: The numeric photo id
      type: integer
      example: 100
      minimum: 1
    commentID:
      title: Comment id
      description: The numeric comment id
      type: integer
      example: 100
      minimum: 1
    caption:
      title: Caption
      description: The caption of the photo
      type: string
      pattern: '^[^\/\\]{0,64}$'
      example: "This is a caption"
      minLength: 0
      maxLength: 64
    createdAt:
      title: Timestamp
      description: The timestamp of the post.
      type: string
      format: date-time
      pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$"
      example: "2020-12-31T23:59:59"
      minLength: 19
      maxLength: 19
    Auth:
      title: Auth
      description: The authorization code is the user_id.
      type: integer
      example: 10
      minimum: 1
    User:
      title: User
      description: The user object
      type: object
      properties:
        userID: { $ref: '#/components/schemas/userID' }
        username: { $ref: '#/components/schemas/username' }
        profilePicture: { $ref: '#/components/schemas/imageData' }
    Profile:
      title: Profile
      description: The profile of the user
      type: object
      properties:
        user: { $ref: '#/components/schemas/User' }
        name: { type: string }
        follower:
          type: integer
          description: The number of followers
          example: 100
          minimum: 0
        following:
          type: integer
          description: The number of following users
          example: 100
          minimum: 0
        postsCount:
          type: integer
          description: The number of posts
          example: 100
          minimum: 0
        isFollowed:
          type: boolean
          description: True if the user is followed by the authenticated user
          example: true
    Photo:
      title: Photo
      description: List of photos
      type: object
      properties:
        imageData: { $ref: '#/components/schemas/imageData' }
        caption: { $ref: '#/components/schemas/caption' }
        createdAt: { $ref: '#/components/schemas/createdAt' }
        nlike:
          type: integer
          description: The number of likes
          example: 100
          minimum: 0
        ncomment:
          type: integer
          description: The number of comments
          example: 100
          minimum: 0
        liked:
          type: boolean
          description: True if the photo is liked by the authenticated user
          example: true
    PhotoList:
      title: Photo list
      description: List of photos
      type: array
      items: { $ref: '#/components/schemas/Photo' }
      minItems: 0
      maxItems: 100
    UserList:
      title: User list
      description: List of users
      type: array
      items: 
        type: object
        description: user
        properties:
          user: { '#/components/schemas/User' }
          imageData: { $ref: '#/components/schemas/imageData' }
      minItems: 0
      maxItems: 100
    Authorization:
      title: Authorization
      description: The authorization is the user id.
      type: object
      properties:
        user: { $ref: '#/components/schemas/User' }
        token: { $ref: '#/components/schemas/Auth' }
    Comment:
      title: Comment
      description: The comment object of the post
      type: object
      properties:
        commentID: { $ref: '#/components/schemas/commentID' }
        ownerID: { $ref: '#/components/schemas/userID' }
        user: { $ref: '#/components/schemas/User' }
        lyric:
          type: string
          description: The comment of the post
          example: "This is a comment"
          pattern: '^[^\/\\]{1,64}$'
          minLength: 1
          maxLength: 64
        createdAt: { $ref: '#/components/schemas/createdAt' }
    CommentList:
      title: Comment list
      description: List of all comments on the photo.
      type: array
      items: { $ref: '#/components/schemas/Comment' }
      minItems: 0
      maxItems: 100

  responses:
    # 200 response
    Success:
      description: Success
      content:
        text/plain:
          schema:
            description: Success message
            type: string
            properties:
              message:
                type: string
    # 201 response
    Created:
      description: Created
      content:
        text/plain:
          schema:
            description: Created message
            type: string
            properties:
              message:
                type: string
    # 204 response
    NoContent:
      description: No content
      content:
        text/plain:
          schema:
            description: No content message
            type: string
            properties:
              message:
                type: string
    # 400 response
    BadRequest:
      description: Bad request
      content:
        text/plain:
          schema:
            description: Bad request message
            type: string
            properties:
              message:
                type: string
    # 401 response
    Unauthorized:
      description: Unauthorized
      content:
        text/plain:
          schema:
            description: Unauthorized message
            type: string
            properties:
              message:
                type: string
    # 403 response
    Forbidden:
      description: Forbidden
      content:
        text/plain:
          schema:
            description: Forbidden message
            type: string
            properties:
              message:
                type: string
    # 404 response
    NotFound:
      description: Not found
      content:
        text/plain:
          schema:
            description: Not found message
            type: string
            properties:
              message:
                type: string
    # 500 response
    InternalServerError:
      description: Internal server error
      content:
        text/plain:
          schema:
            description: Internal server error message
            type: string
            properties:
              message:
                type: string
    

paths:
  /login:
    post:
      summary: User login
      tags:
        - Login
      operationId: doLogin
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              description: username of the user
              type: object
              properties:
                username: { $ref: '#/components/schemas/username' }
        required: true
      responses:
        '200': { $ref: '#/components/responses/Success' }
        "201": { $ref: '#/components/responses/Created' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /profiles/{profileUserID}:
    parameters:
      - name: profileUserID
        in: path
        description: profile of the user id you want to see.
        required: true
        schema: { $ref: '#/components/schemas/userID' }

    get:
      summary: Get user profile
      tags:
        - User Profile
      operationId: getUserProfile
      description: Get the profile of the user.
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Profile' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }

    delete:
      summary: Delete user
      tags:
        - User Profile
      operationId: deleteUser
      description: Delete the user.
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema: { $ref: '#/components/responses/Success' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "403": { $ref: '#/components/responses/Forbidden' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /profiles/{profileUserID}/username:
    parameters:
      - name: profileUserID
        in: path
        description: profile of the user id you want to change the username.
        required: true
        schema: { $ref: '#/components/schemas/userID' }

    put:
      summary: Change username
      tags:
        - User Profile
      operationId: setMyUserName
      description: Set new username of the user. The new username must be unique.
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              description: username of the user
              type: object
              properties:
                username: { $ref: '#/components/schemas/username' }
        required: true
      responses:
        '200':
          description: Username updated
          content:
            application/json:
              schema: { $ref: '#/components/responses/Success' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /profiles/{profileUserID}/profile-picture:
    parameters:
      - name: profileUserID
        in: path
        description: profile of the user id you want to change the profile picture.
        required: true
        schema: { $ref: '#/components/schemas/userID' }
    
    put:
      summary: Change or Set profile picture
      tags:
        - User Profile
      operationId: setMyProfilePic
      description: Set or change the profile picture of the user.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              description: file to upload.
              properties:
                imageData: { $ref: '#/components/schemas/imageData' }
      responses:
        '200':
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                description: URL of the profile picture
                properties:
                  schema: { $ref: '#/components/schemas/imageData' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /profiles/{profileUserID}/reset-profile-picture:
    put:
      summary: Reset profile picture
      tags:
        - User Profile
      responses:
        '200':
          description: Profile picture reset

  /profiles/{profileUserID}/followings/{targetUserID}:
    put:
      summary: Follow a user
      tags:
        - Social
      responses:
        '200':
          description: User followed
    delete:
      summary: Unfollow a user
      tags:
        - Social
      responses:
        '200':
          description: User unfollowed

  /profiles/{profileUserID}/followings:
    get:
      summary: Get followings
      tags:
        - Social
      responses:
        '200':
          description: List of followings retrieved

  /profiles/{profileUserID}/followers:
    get:
      summary: Get followers
      tags:
        - Social
      responses:
        '200':
          description: List of followers retrieved

  /profiles/{profileUserID}/bans/{targetUserID}:
    put:
      summary: Ban a user
      tags:
        - Social
      responses:
        '200':
          description: User banned
    delete:
      summary: Unban a user
      tags:
        - Social
      responses:
        '200':
          description: User unbanned

  /profiles/{profileUserID}/bans:
    get:
      summary: Get banned users
      tags:
        - Social
      responses:
        '200':
          description: List of banned users retrieved

  /profiles/{profileUserID}/posts:
    post:
      summary: Upload a post
      tags:
        - Posts
      responses:
        '201':
          description: Post uploaded
    get:
      summary: Get user posts
      tags:
        - Posts
      responses:
        '200':
          description: List of posts retrieved

  /profiles/{profileUserID}/posts/{postID}/caption:
    put:
      summary: Change post caption
      tags:
        - Posts
      responses:
        '200':
          description: Caption updated

  /profiles/{profileUserID}/posts/{postID}:
    delete:
      summary: Delete a post
      tags:
        - Posts
      responses:
        '204':
          description: Post deleted

  /profiles/{profileUserID}/posts/{postID}/likes/{userID}:
    put:
      summary: Like a post
      tags:
        - Posts
      responses:
        '200':
          description: Post liked
    delete:
      summary: Unlike a post
      tags:
        - Posts
      responses:
        '200':
          description: Post unliked

  /profiles/{profileUserID}/posts/{postID}/likes:
    get:
      summary: Get likes of a post
      tags:
        - Posts
      responses:
        '200':
          description: List of likes retrieved

  /profiles/{profileUserID}/posts/{postID}/comments:
    post:
      summary: Comment on a post
      tags:
        - Posts
      responses:
        '201':
          description: Comment added
    get:
      summary: Get comments on a post
      tags:
        - Posts
      responses:
        '200':
          description: List of comments retrieved

  /profiles/{profileUserID}/posts/{postID}/comments/{commentID}:
    delete:
      summary: Delete a comment
      tags:
        - Posts
      responses:
        '204':
          description: Comment deleted

  /profiles/{profileUserID}/feed:
    get:
      summary: Get user feed
      tags:
        - Posts
      responses:
        '200':
          description: Feed retrieved

  /profiles:
    get:
      summary: Search users
      tags:
        - User Profile
      responses:
        '200':
          description: Search results retrieved

  /liveness:
    get:
      summary: Check API liveness
      tags:
        - Misc
      responses:
        '200':
          description: API is live
