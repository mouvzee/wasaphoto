openapi: 3.0.3
info:
  title: WASAphoto
  description: |-
    Versione 1 del progetto WASA.
  version: "1"
tags:
  - name: Login
    description: Everything about login
  - name: Username
    description: Everything about username
  - name: Photo
    description: Everything about photos
  - name: User Profile
    description: Everything about user profiles
  - name: Stream
    description: Everything about the stream
components:
  schemas:
    username:
      title: Username
      description: The username of the user
      type: string
      pattern: "^[a-z0-9]{3,13}$"
      example: "john123"
      minLength: 3
      maxLength: 13
    imageData:
      title: Image
      description: The base 64 image data
      type: string
      format: byte
      minLength: 0
      maxLength: 1000000000
    caption:
      title: Caption
      description: The caption of the photo
      type: string
      pattern: '^[^\/\\]{0,64}$'
      example: "This is a caption"
      minLength: 0
      maxLength: 64
    createdAt:
      title: Timestamp
      description: The timestamp of the post.
      type: string
      format: date-time
      pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$"
      example: "2020-12-31T23:59:59"
      minLength: 19
      maxLength: 19
    Auth:
      title: Auth
      description: The authorization code is the user_id.
      type: integer
      example: 10
      minimum: 1
      maximum: 10000
    User:
      title: User
      description: The user object
      type: object
      properties:
        userID:
          type: integer
          description: The user id of the user.
          example: 100
          minimum: 1
          maximum: 10000
        username: { $ref: "#/components/schemas/username" }
        profilePicture: { $ref: "#/components/schemas/imageData" }
    Profile:
      title: Profile
      description: The profile of the user
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        name: { type: string }
        follower:
          type: integer
          description: The number of followers
          example: 100
          minimum: 0
          maximum: 10000
        following:
          type: integer
          description: The number of following users
          example: 100
          minimum: 0
          maximum: 10000
        postsCount:
          type: integer
          description: The number of posts
          example: 100
          minimum: 0
          maximum: 10000
        isFollowed:
          type: boolean
          description: True if the user is followed by the authenticated user
          example: true
    Photo:
      title: Photo
      description: List of photos
      type: object
      properties:
        imageData: { $ref: "#/components/schemas/imageData" }
        caption: { $ref: "#/components/schemas/caption" }
        createdAt: { $ref: "#/components/schemas/createdAt" }
        nlike:
          type: integer
          description: The number of likes
          example: 100
          minimum: 0
          maximum: 10000
        ncomment:
          type: integer
          description: The number of comments
          example: 100
          minimum: 0
          maximum: 10000
        liked:
          type: boolean
          description: True if the photo is liked by the authenticated user
          example: true
    PhotoList:
      title: Photo list
      description: List of photos
      type: array
      items: { $ref: "#/components/schemas/Photo" }
      minItems: 0
      maxItems: 100
    UserList:
      title: User list
      description: List of users
      type: array
      items:
        type: object
        description: user
        properties:
          user: { $ref: "#/components/schemas/User" }
          imageData: { $ref: "#/components/schemas/imageData" }
      minItems: 0
      maxItems: 100
    Authorization:
      title: Authorization
      description: The authorization is the user id.
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        token: { $ref: "#/components/schemas/Auth" }
    Comment:
      title: Comment
      description: The comment object of the post
      type: object
      properties:
        commentID:
          type: integer
          description: The comment id of the comment.
          example: 100
          minimum: 1
          maximum: 10000
        ownerID: { $ref: "#/components/parameters/userID" }
        user: { $ref: "#/components/schemas/User" }
        lyric:
          type: string
          description: The comment of the post
          example: "This is a comment"
          pattern: '^[^\/\\]{1,64}$'
          minLength: 1
          maxLength: 64
        createdAt: { $ref: "#/components/schemas/createdAt" }
    CommentList:
      title: Comment list
      description: List of all comments on the photo.
      type: array
      items: { $ref: "#/components/schemas/Comment" }
      minItems: 0
      maxItems: 100
  parameters:
    userID:
      name: userID
      in: path
      required: true
      description: The user id of the user.
      schema:
        type: integer
        example: 100
        minimum: 1
        maximum: 10000
    targetUserID:
      name: targetUserID
      in: path
      description: The user id of the user.
      required: true
      schema:
        type: integer
        example: 100
        minimum: 1
        maximum: 10000
    photoID:
      name: photoID
      in: path
      description: The numeric photo id
      required: true
      schema:
        type: integer
        example: 100
        minimum: 1
        maximum: 10000
    commentID:
      name: commentID
      in: path
      description: The numeric comment id
      required: true
      schema:
        type: integer
        example: 100
        minimum: 1
        maximum: 10000
  responses:
    # 200 response
    Success:
      description: Success
      content:
        text/plain:
          schema:
            description: Success message
            type: object
            properties:
              message:
                type: string
    # 201 response
    Created:
      description: Created
      content:
        text/plain:
          schema:
            description: Created message
            type: object
            properties:
              message:
                type: string
    # 204 response
    NoContent:
      description: No content
      content:
        text/plain:
          schema:
            description: No content message
            type: object
            properties:
              message:
                type: string
    # 400 response
    BadRequest:
      description: Bad request
      content:
        text/plain:
          schema:
            description: Bad request message
            type: object
            properties:
              message:
                type: string
    # 401 response
    Unauthorized:
      description: Unauthorized
      content:
        text/plain:
          schema:
            description: Unauthorized message
            type: object
            properties:
              message:
                type: string
    # 403 response
    Forbidden:
      description: Forbidden
      content:
        text/plain:
          schema:
            description: Forbidden message
            type: object
            properties:
              message:
                type: string
    # 404 response
    NotFound:
      description: Not found
      content:
        text/plain:
          schema:
            description: Not found message
            type: object
            properties:
              message:
                type: string
    # 500 response
    InternalServerError:
      description: Internal server error
      content:
        text/plain:
          schema:
            description: Internal server error message
            type: object
            properties:
              message:
                type: string

paths:
  /login:
    post:
      summary: User login
      tags:
        - Login
      operationId: doLogin
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              description: username of the user
              type: object
              properties:
                username: { $ref: "#/components/schemas/username" }
        required: true
      responses:
        "200": { $ref: "#/components/responses/Success" }
        "201": { $ref: "#/components/responses/Created" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}:
    parameters:
      - $ref: "#/components/parameters/userID"

    get:
      summary: Get user profile
      tags:
        - User Profile
      operationId: getUserProfile
      description: Get the profile of the user.
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

    delete:
      summary: Delete user
      tags:
        - User Profile
      operationId: deleteUser
      description: Delete the user.
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema: { $ref: "#/components/responses/Success" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/username:
    parameters:
      - $ref: "#/components/parameters/userID"

    put:
      summary: Change username
      tags:
        - User Profile
      operationId: setMyUserName
      description: Set new username of the user. The new username must be unique.
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              description: username of the user
              type: object
              properties:
                username: { $ref: "#/components/schemas/username" }
        required: true
      responses:
        "200":
          description: Username updated
          content:
            application/json:
              schema: { $ref: "#/components/responses/Success" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }

  /profiles/{userID}/profile-picture:
    parameters:
      - $ref: "#/components/parameters/userID"

    put:
      summary: Change or Set profile picture
      tags:
        - User Profile
      operationId: setMyProfilePic
      description: Set or change the profile picture of the user.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              description: file to upload.
              properties:
                imageData: { $ref: "#/components/schemas/imageData" }
      responses:
        "200":
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                description: URL of the profile picture
                properties:
                  schema: { $ref: "#/components/schemas/imageData" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/reset-profile-picture:
    parameters:
      - $ref: "#/components/parameters/userID"
    put:
      summary: Reset profile picture
      tags:
        - User Profile
      operationId: resetMyProfilePic
      description: Reset the profile picture of the user to default.

      responses:
        "200":
          description: Profile picture resetted successfully
          content:
            application/json:
              schema: { $ref: "#/components/responses/Success" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/followings/{targetUserID}:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/targetUserID"
    put:
      summary: Follow a user
      tags: ["User"]
      operationId: followUser
      responses:
        "200":
          description: User followed successfully.
          content:
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete:
      summary: Unfollow a user
      tags: ["User"]
      operationId: unfollowUser
      description: Unfollow the user with the given userID and delete it from the following
      responses:
        "200":
          description: User unfollowed successfully.
          content:
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/followings:
    parameters:
      - $ref: "#/components/parameters/userID"

    get:
      summary: Get followings
      tags: ["User"]
      operationId: getMyFollowings
      description: Get the list of users that the user is following.

      responses:
        "200":
          description: List of followings retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/followers:
    parameters:
      - $ref: "#/components/parameters/userID"

    get:
      summary: Get followers
      tags: ["User"]
      operationId: getMyFollowers
      description: Get the list of users that are following the user.
      responses:
        "200":
          description: List of followers retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/bans/{targetUserID}:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/targetUserID"

    put:
      summary: Ban a user
      tags: ["User"]
      operationId: banUser
      description: Ban the user with the given userID and delete it from the following
      responses:
        "200":
          description: User banned successfully.
          content:
            text/plain:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete:
      summary: Unban a user
      tags: ["User"]
      operationId: unbanUser
      description: Unban the user with the given userID and delete it from the following
      responses:
        "200":
          description: User unbanned successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/bans:
    parameters:
      - $ref: "#/components/parameters/userID"
    get:
      summary: Get banned users
      tags: ["User"]
      operationId: getMyBans
      description: Get the list of users that are banned by the user.
      responses:
        "200":
          description: List of banned users retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/posts:
    parameters:
      - $ref: "#/components/parameters/userID"

    post:
      summary: Upload a post
      tags: ["Posts"]
      operationId: uploadPhoto
      description: Upload a photo with a caption.
      requestBody:
        description: Photo to upload
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                imageData: { $ref: "#/components/schemas/imageData" }
                caption: { $ref: "#/components/schemas/caption" }
        required: true

      responses:
        "201":
          description: Post uploaded successfully.
          content:
            application/json:
              schema: { $ref: "#/components/responses/Success" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    get:
      summary: Get user posts
      tags: ["Posts"]
      operationId: getPosts
      description: Get the list of posts of the user.
      responses:
        "200":
          description: List of posts retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PhotoList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/posts/{photoID}/caption:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"
    put:
      summary: Change post caption
      tags:
        - Posts
      responses:
        "200":
          description: Caption updated

  /profiles/{userID}/posts/{photoID}:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"

    delete:
      summary: Delete a post
      tags: ["Posts"]
      operationId: deletePhoto
      description: Delete the post with the given photoID.
      responses:
        "200":
          description: Post deleted successfully.
          content:
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/posts/{photoID}/likes/{targetUserID}:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"
      - $ref: "#/components/parameters/targetUserID"

    put:
      summary: Like a post
      tags: ["Posts"]
      operationId: likePhoto
      description: Like the post with the given photoID.
      responses:
        "200":
          description: Post liked successfully.
          content:
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete:
      summary: Unlike a post
      tags: ["Posts"]
      operationId: unlikePhoto
      description: Unlike the post with the given photoID.
      responses:
        "200":
          description: Post unliked successfully.
          content:
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/posts/{photoID}/likes:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"

    get:
      summary: Get likes of a post
      tags: ["Posts"]
      operationId: getLikes
      description: Get the list of users that liked the post.
      responses:
        "200":
          description: List of likes retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/posts/{photoID}/comments:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"

    post:
      summary: Comment on a post
      tags: ["Posts"]
      operationId: commentPhoto
      description: Comment on the post with the given photoID.
      responses:
        "201":
          description: Comment added successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    get:
      summary: Get comments on a post
      tags: ["Posts"]
      operationId: getComments
      description: Get the list of comments on the post with the given photoID.
      responses:
        "200":
          description: List of comments retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/posts/{photoID}/comments/{commentID}:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"
      - $ref: "#/components/parameters/commentID"
    delete:
      summary: Delete a comment
      tags: ["Posts"]
      operationId: uncommentPhoto
      description: Delete the comment with the given commentID.
      responses:
        "200":
          description: Comment deleted successfully.
          content:
            text/plain:
              schema: { $ref: "#/components/responses/Success" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userID}/feed:
    parameters:
      - $ref: "#/components/parameters/userID"

    get:
      summary: Get user feed
      tags: ["Stream"]
      operationId: getMyStream
      description: Get the list of posts of the users that the user is following.
      responses:
        "200":
          description: Feed retrieved successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PhotoList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles:
    parameters:
      - name: search
        in: query
        description: Search for users by username.
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 13
          pattern: "^[a-z0-9]{3,13}$"
          example: "john"

    get:
      summary: Search users
      tags: ["User"]
      operationId: searchUsers
      description: Get the list of users that match the search query.
      responses:
        "200":
          description: List of users retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /liveness:
    get:
      summary: Check API liveness
      tags:
        - Misc
      responses:
        "200":
          description: API is live
