openapi: 3.0.3
info:
  title: WASAphoto
  description: |-
    OpenAPI document for the WASAPhoto application
  version: 1.1.0

tags:
- name: Login
  description: Everything about login
- name: Photo
  description: Everything about photos
- name: User
  description: Everything about user
- name: Stream
  description: Everything about the stream

paths:
  /login:
    post:
      summary: User login
      security: []
      tags: [ "Login" ]
      operationId: doLogin
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              description: username of the user
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/Username" 
        required: true
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /profiles/{userID}:
    parameters:
      - $ref: "#/components/parameters/userID"
    get:
      summary: Get user profile
      tags: [ "User" ]
      operationId: getUserProfile
      description: Get the profile of the user.
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /profiles/{userID}/username:
    parameters:
    - $ref: "#/components/parameters/userID"
    put:
      summary: Change username
      tags: [ "User" ]
      operationId: setMyUserName
      description: Set new username of the user. The new username must be unique.
      requestBody:
        description: New username
        content:
          application/json:
            schema:
              description: username of the user
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/Username"
        required: true
      responses:
        "200":
          description: The user profile with the new username
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: '#/components/responses/InternalServerError'
  /profiles/{userID}/followings/{targetUserID}:
    parameters:
    - $ref: "#/components/parameters/userID"
    - $ref: "#/components/parameters/targetUserID"
    put:
      summary: Follow a user
      description: Add the user that you want to follow into list of following
      tags: [ "User" ]
      operationId: followUser
      responses:
        "200":
          description: The user followed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Unfollow a user
      tags: [ "User" ]
      operationId: unfollowUser
      description: Unfollow the user with the given userID and delete it from the following
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /profiles/{userID}/followings:
    parameters:
      - $ref: "#/components/parameters/userID"
    get:
      summary: Get followings
      tags: [ "User" ]
      operationId: listFollowings
      description: Get the list of users that the user is following.

      responses:
        "200":
          description: List of followings retrieved
          content:
            application/json:
              schema:
                description: The list of following
                type: object
                properties:
                  followings:
                    description: The list of users followed by the specified user
                    type: array
                    minItems: 0
                    maxItems: 50
                    items:
                      $ref: "#/components/schemas/User"
        "400": 
          $ref: "#/components/responses/BadRequest" 
        "401": 
          $ref: "#/components/responses/Unauthorized" 
        "403": 
          $ref: "#/components/responses/Forbidden" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
  /profiles/{userID}/followers:
    parameters:
      - $ref: "#/components/parameters/userID"
    get:
      summary: Get followers
      tags: [ "User" ]
      operationId: listFollowers
      description: Get the list of users that are following the user.
      responses:
        "200":
          description: List of followers retrieved
          content:
            application/json:
              schema:
                description: The list of followers
                type: object
                properties:
                  followers:
                    description: The list of users who follow the specified user
                    type: array
                    minItems: 0
                    maxItems: 50
                    items:
                      $ref: "#/components/schemas/User"
        "400":  
          $ref: "#/components/responses/BadRequest" 
        "401": 
          $ref: "#/components/responses/Unauthorized" 
        "403": 
          $ref: "#/components/responses/Forbidden" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
  /profiles/{userID}/bans/{targetUserID}:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/targetUserID"
    put:
      summary: Ban a user
      tags: [ "User" ]
      operationId: banUser
      description: Ban the user with the given userID and delete it from the following
      responses:
        "200":
          description: User banned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User" 
        "400": 
          $ref: "#/components/responses/BadRequest" 
        "401":
          $ref: "#/components/responses/Unauthorized" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
    delete:
      summary: Unban a user
      tags: [ "User" ]
      operationId: unbanUser
      description: Unban the user with the given userID and delete it from the following
      responses:
        "200":
          description: User unbanned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User" 
        "400":
          $ref: "#/components/responses/BadRequest" 
        "401":  
          $ref: "#/components/responses/Unauthorized" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
  /profiles/{userID}/bans:
    parameters:
      - $ref: "#/components/parameters/userID"
    get:
      summary: Get banned users
      tags: [ "User" ]
      operationId: getBannedList
      description: Get the list of users that are banned by the user.
      responses:
        "200":
          description: List of banned users retrieved
          content:
            application/json:
              schema:
                description: The list of banned users
                type: object
                properties:
                  banned:
                    description: The list of banned users
                    type: array
                    minItems: 0
                    maxItems: 50
                    items:
                      $ref: "#/components/schemas/User" 
        "400":
          $ref: "#/components/responses/BadRequest" 
        "401":
          $ref: "#/components/responses/Unauthorized" 
        "403":
          $ref: "#/components/responses/Forbidden" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
  /profiles/{userID}/posts:
    parameters:
      - $ref: "#/components/parameters/userID"
    post:
      summary: Upload a post
      tags: [ "Posts" ]
      operationId: uploadPhoto
      description: Upload a photo with a caption.
      parameters:
        - name: caption
          in: query
          description: Optional description
          required: true
          schema:
            description: The caption of the post
            type: object
            properties:
              caption:
                $ref: "#/components/schemas/Caption"
      requestBody:
        description: Photo to upload
        content:
          image/*:
            schema:
              description: The image
              type: object
              properties:
                imageData:
                  $ref: "#/components/schemas/ImageData" 
      responses:
        "201":
          description: Post created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400": 
          $ref: "#/components/responses/BadRequest" 
        "401":
          $ref: "#/components/responses/Unauthorized" 
        "403":
          $ref: "#/components/responses/Forbidden" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
    get:
      summary: Get user posts
      tags: [ "Posts" ]
      operationId: getUserPhotos
      description: Get the list of posts of the user.
      responses:
        "200":
          description: List of posts retrieved
          content:
            application/json:
              schema:
                description: The list of photos of the user
                type: object
                properties:
                  photos:
                    description: The list of photos posted by the user
                    type: array
                    items:
                      $ref: "#/components/schemas/Photo"
                    minItems: 0
                    maxItems: 50
        "400":
          $ref: "#/components/responses/BadRequest" 
        "401":
          $ref: "#/components/responses/Unauthorized" 
        "403":
          $ref: "#/components/responses/Forbidden" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
  /profiles/{userID}/posts/{photoID}:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"
      
    delete:
      summary: Delete a post
      tags: [ "Posts" ]
      operationId: deletePhoto
      description: Delete the post with the given photoID.
      responses:
        "204":
          $ref: "#/components/responses/NoContent" 
        "400":
          $ref: "#/components/responses/BadRequest" 
        "401":
          $ref: "#/components/responses/Unauthorized" 
        "403":
          $ref: "#/components/responses/Forbidden" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
  /profiles/{userID}/posts/{photoID}/likes/{likeID}:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"
      - $ref: "#/components/parameters/likeID"
    put:
      summary: Like a post
      tags: [ "Posts" ]
      operationId: likePhoto
      description: Like the post with the given photoID.
      responses:
        "200":  
          $ref: "#/components/responses/Success" 
        "201":
          $ref: "#/components/responses/Created"
        "400":  
          $ref: "#/components/responses/BadRequest" 
        "401":  
          $ref: "#/components/responses/Unauthorized" 
        "403":  
          $ref: "#/components/responses/Forbidden" 
        "500":  
          $ref: "#/components/responses/InternalServerError" 
    delete:
      summary: Unlike a post
      tags: [ "Posts" ]
      operationId: unlikePhoto
      description: Unlike the post with the given photoID.
      responses:
        "204": 
          $ref: "#/components/responses/NoContent"
        "400": 
          $ref: "#/components/responses/BadRequest" 
        "401": 
          $ref: "#/components/responses/Unauthorized" 
        "403": 
          $ref: "#/components/responses/Forbidden" 
        "500": 
          $ref: "#/components/responses/InternalServerError" 
  /profiles/{userID}/posts/{photoID}/likes:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"
    get:
      summary: Get likes of a post
      tags: [ "Posts" ]
      operationId: getLikes
      description: Get the list of users that liked the post.
      responses:
        "200":
          description: List of likes retrieved
          content:
            application/json:
              schema:
                description: The list of likes
                type: object
                properties:
                  likes:
                    description: The list of likes put by the user
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                    minItems: 0
                    maxItems: 50
        "400":
          $ref: "#/components/responses/BadRequest" 
        "401":
          $ref: "#/components/responses/Unauthorized" 
        "403":
          $ref: "#/components/responses/Forbidden" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
  /profiles/{userID}/posts/{photoID}/comments:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"
    post:
      summary: Comment on a post
      tags: [ "Posts" ]
      operationId: commentPhoto
      description: Comment on the post with the given photoID.
      requestBody:
        description: The caption of the comment
        content:
          application/json:
            schema:
              description: The caption of the comment posted
              type: object
              properties:
                caption:
                  $ref: "#/components/schemas/Comment/properties/lyric"
      responses:
        "201":
          description: Comment added successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/BadRequest" 
        "401":
          $ref: "#/components/responses/Unauthorized" 
        "403":
          $ref: "#/components/responses/Forbidden" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
    get:
      summary: Get comments on a post
      tags: [ "Posts" ]
      operationId: getComments
      description: Get the list of comments on the post with the given photoID.
      responses:
        "200":
          description: List of comments retrieved
          content:
            application/json:
              schema:
                description: The list of comments
                type: object
                properties:
                  comments:
                    description: The list of comments posted by the user
                    type: array
                    minItems: 0
                    maxItems: 50
                    items:
                      $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized" 
        "403":
          $ref: "#/components/responses/Forbidden" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
  /profiles/{userID}/posts/{photoID}/comments/{commentID}:
    parameters:
      - $ref: "#/components/parameters/userID"
      - $ref: "#/components/parameters/photoID"
      - $ref: "#/components/parameters/commentID"
    delete:
      summary: Delete a comment
      tags: [ "Posts" ]
      operationId: uncommentPhoto
      description: Delete the comment with the given commentID.
      responses:
        "200":
          $ref: "#/components/responses/Success" 
        "400":
          $ref: "#/components/responses/BadRequest" 
        "401":
          $ref: "#/components/responses/Unauthorized" 
        "403":
          $ref: "#/components/responses/Forbidden" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
  /profiles/{userID}/feed:
    parameters:
      - $ref: "#/components/parameters/userID"
    get:
      summary: Get user feed
      tags: [ "Stream" ]
      operationId: getMyStream
      description: Get the list of posts of the users that the user is following.
      responses:
        "200":
          description: Feed retrieved successfully.
          content:
            application/json:
              schema:
                description: The stream of the user
                type: object
                properties:
                  posts:
                    description: The list of posts
                    type: array
                    minItems: 0
                    maxItems: 50
                    items:
                      $ref: "#/components/schemas/Photo"
        "400":
          $ref: "#/components/responses/BadRequest" 
        "401":
          $ref: "#/components/responses/Unauthorized" 
        "403":
          $ref: "#/components/responses/Forbidden" 
        "500":
          $ref: "#/components/responses/InternalServerError" 
  /profiles:

    get:
      summary: Search users
      tags: [ "User" ]
      operationId: searchUsers
      description: Get the list of users that match the search query.
      parameters:
        - name: username
          in: query
          description: Search for users by username.
          required: true
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: List of users retrieved
          content:
            application/json:
              schema:
                description: List of username found
                type: object
                properties:
                  users:
                    description: The list of users found
                    type: array
                    minItems: 0
                    maxItems: 50
                    items:
                      $ref: "#/components/schemas/Username"
        "400":
          $ref: "#/components/responses/BadRequest" 
        "401":
          $ref: "#/components/responses/Unauthorized" 
        "403":
          $ref: "#/components/responses/Forbidden" 

components:
  schemas:
    Username:
      title: Username
      description: The username of the user
      type: object
      properties:
        username:
          type: string
          pattern: "^[a-z0-9]{3,13}$"
          example: "john123"
          minLength: 3
          maxLength: 13
    ImageData:
      title: Image
      description: The binary of the image (1-20Mb)
      type: string
      format: binary
      minLength: 1
      maxLength: 20971520
    Caption:
      title: Caption
      description: The caption of the photo
      type: string
      pattern: '^[^\/\\]{0,64}$'
      example: "This is a caption"
      minLength: 0
      maxLength: 64
    Timestamp:
      title: Timestamp
      description: The timestamp of the post.
      type: string
      format: date-time
      pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$"
      example: "2020-12-31T23:59:59"
      minLength: 19
      maxLength: 19
    UserID:
      type: integer
      description: The user id of the user.
      example: 100
    User:
      title: User
      description: The user object
      type: object
      properties:
        userID:
          $ref: "#/components/schemas/UserID"
        username:
          $ref: "#/components/schemas/Username"
        profilePicture:
          $ref: "#/components/schemas/ImageData"
    Profile:
      title: Profile
      description: The profile of the user
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        follower:
          type: integer
          description: The number of followers
          example: 100
          minimum: 0
        following:
          type: integer
          description: The number of following users
          example: 100
          minimum: 0
        postsCount:
          type: integer
          description: The number of posts
          example: 100
          minimum: 0
        isFollowed:
          type: boolean
          description: True if the user is followed by the authenticated user
          example: true
    PhotoID:
      description: The ID of the post
      type: integer
      readOnly: true
      example: 100
    Photo:
      title: Photo
      description: A posted photo with all the information related
      type: object
      properties:
        photoID:
          $ref: "#/components/schemas/PhotoID"
        imageData:
          $ref: "#/components/schemas/ImageData"
        caption:
          $ref: "#/components/schemas/Caption"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
        nlike:
          type: integer
          description: The number of likes
          example: 100
          minimum: 0
        ncomment:
          type: integer
          description: The number of comments
          example: 100
          minimum: 0
        liked:
          type: boolean
          description: True if the photo is liked by the authenticated user
          example: true
    Comment:
      title: Comment
      description: The comment object of the post
      type: object
      properties:
        commentID:
          type: integer
          description: The comment id of the comment.
          readOnly: true
          example: 100
        ownerID:
          $ref: "#/components/schemas/UserID"
        photoID:
          $ref: "#/components/schemas/PhotoID"
        lyric:
          $ref: "#/components/schemas/Caption"
        createdAt:
          $ref: "#/components/schemas/Timestamp"
    Message:
      title: Message
      description: This object represent a generic description of a message
      type: object
      readOnly: true
      properties:
        error:
          description: The message of the error
          type: string
          pattern: '\S.+'
          example: Username is already taken
          minLength: 0
          maxLength: 200

  parameters:
    userID:
      name: userID
      in: path
      required: true
      description: The user id of the user.
      schema:
        $ref: "#/components/schemas/UserID"
    photoID:
      name: photoID
      in: path
      description: The numeric photo id
      required: true
      schema:
        $ref: "#/components/schemas/PhotoID"
    commentID:
      name: commentID
      in: path
      description: The numeric comment id
      required: true
      schema:
        $ref: "#/components/schemas/Comment/properties/commentID"
    likeID:
      name: likeID
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/UserID"
    targetUserID:
      name: targetUserID
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/UserID"

  responses:
    # 200 response
    Success:
      description: Success
      content:
        application/json:
          schema:
            description: Success message
            type: object
            properties:
              message:
                $ref: "#/components/schemas/Message"
    # 201 response
    Created:
      description: Created
      content:
        application/json:
          schema:
            description: Created message
            type: object
            properties:
              message:
                $ref: "#/components/schemas/Message"
    # 204 response
    NoContent:
      description: No content
      content:
        application/json:
          schema:
            description: No content message
            type: object
            properties:
              message:
                $ref: "#/components/schemas/Message"
    # 400 response
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            description: Bad request message
            type: object
            properties:
              message:
                $ref: "#/components/schemas/Message"
    # 401 response
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            description: Unauthorized message
            type: object
            properties:
              message:
                $ref: "#/components/schemas/Message"
    # 403 response
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            description: Forbidden message
            type: object
            properties:
              message:
                $ref: "#/components/schemas/Message"
    # 404 response
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            description: Not found message
            type: object
            properties:
              message:
                $ref: "#/components/schemas/Message"
    # 500 response
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            description: Internal server error message
            type: object
            properties:
              message:
                $ref: "#/components/schemas/Message"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

# Apply the security global, to all the operations
security:
- bearerAuth: []
